#include <iostream> 
using namespace std; 

// Função que define pivô como o último e bota ele no lugar entre os maiores (que ele) e menores (que ele)
int particionar(int vetor[], int inicio, int fim) 
{ 
    int pivo = vetor[fim]; 
    int i = (inicio - 1);
    int temp = 0 ;

    for (int j = inicio; j <= fim - 1; j++) { 
        if (vetor[j] <= pivo) { 
            i++; 
            temp = vetor[i]; 
            vetor[i] = vetor[j];
            vetor[j] = temp;
        } 
    } 
    temp = vetor[i + 1]; 
    vetor[i + 1] = vetor[fim];
    vetor[fim] = temp;
    return (i + 1); 
} 

// Função iterativa
void QuicksortIterativo(int vetor[], int inicio, int fim) 
{ 
    // Criar pilha auxiliar
    int pilha[fim - inicio + 1]; 
    int topo = -1; 

    // Empilhar valores de inicio e fim 
    pilha[++topo] = inicio; 
    pilha[++topo] = fim; 

    // Enquanto não estiver vazia, desempilhar da pilha 
    while (topo >= 0) { 
        // Desempilhar inicio e fim 
        fim = pilha[topo--]; 
        inicio = pilha[topo--]; 

        // Botar pivo no lugar final dele
        int pivo = particionar(vetor, inicio, fim); 

        // Se tiver elementos menores (à esquerda), por na pilha
        if (pivo - 1 > inicio) { 
            pilha[++topo] = inicio; 
            pilha[++topo] = pivo - 1; 
        } 

        // Se tiver elementos maiores (à direita), por na pilha
        if (pivo + 1 < fim) { 
            pilha[++topo] = pivo + 1; 
            pilha[++topo] = fim; 
        } 
    } 
} 

// Teste
int main() 
{   
    
    int vetor[] = { 4, 3, 5, 2, 1, 3, 2, 3 }; 
    int n = sizeof(vetor) / sizeof(*vetor); 

    QuicksortIterativo(vetor, 0, n - 1); 

    // Printar
    for (int i = 0; i < n; ++i) 
        cout << vetor[i] << " "; 

    return 0; 
} 
